@comment{"Generate a call to a Java API method"}
@comment{"===================================="}

@code{
	def requiresTypeCheck(methods) {
		for (method : methods) {
			for (param : method.params) {
				if ([CLASS_PRIMITIVE, CLASS_BOXED_PRIMITIVE, CLASS_STRING, CLASS_JSON_ARRAY, CLASS_JSON_OBJECT, CLASS_HANDLER].contains(param.type.kind)) {
					return true;
				}
			}
		}
		return false;
	}
}

@code{
	def getAllParamNames(methods) {
		paramNames = [];
		for (method : methods) {
			for (param : method.params) {
				if (!paramNames.contains(param.name)) {
					paramNames.add(param.name);
				}
			}
		}
		return paramNames;
	}
}

@code{
	def getParamNames(method) {
		paramNames = [];
		for (param : method.params) {
			paramNames.add(param.name);
		}
		return paramNames;
	}
}

@declare{'genMethodCall'}
@if{static}jvm.@{ifaceFQCN}@else{}self.j@{ifaceName}@end{}.@{method.name}(
	@foreach{param: method.params}
		@code{argName=helper.convertCamelCaseToUnderscores(param.name);}
		@includeNamed{'convParam'}
	@end{", "})
@end{}

@comment{"Generate the code that converts a parameter from JavaScript to Java to call a Java API method"}
@comment{"============================================================================================="}

@declare{'convParam'}
	@code{paramName = overloaded ? argName : param.name;}
	@if{param.type.name.startsWith('io.vertx.core.Handler<')}
		@code{genericType = helper.getGenericType(param.type.name)}
		@if{genericType.startsWith('io.vertx.core.AsyncResult<')}
			@code{genericType = helper.getGenericType(genericType)}
			Async@{helper.getSimpleName(genericType)}Handler(@{paramName})
		@else{genericType.equals('java.lang.Void')}
			@{paramName}
		@else{}
			@{helper.getSimpleName(genericType)}Handler(@{paramName})
		@end{}
	@else{param.type.name.equals('io.vertx.core.json.JsonObject')}
		util.dict_to_json(@{paramName})
	@else{param.type.name.equals('io.vertx.core.json.JsonArray')}
		util.list_to_json(@{paramName})
	@else{param.options}
		@{helper.getSimpleName(param.type.name)}.optionsFromJson(util.dict_to_json(@{paramName})) if @{paramName} is not None else None
	@else{param.type.kind == CLASS_OBJECT}
		util.python_to_java(@{paramName})
	@else{helper.isBasicType(param.type.name) || param.type.name.equals('java.lang.Void')}
		@{paramName}
	@else{}
		@{paramName}._jdel()
	@end{}
@end{}

@declare{'resultVal'}
result
@end{}

@declare{'arVal'}
result.result()
@end{}

@comment{"Generate the code that converts a Java return to the corresponding JavaScript value"}
@comment{"This is also used for converting values returned from Java API via handlers"}
@comment{"==================================================================================="}

@declare{'convReturn'}
	@code{genericType=helper.getGenericType(returnType)}
	@if{returnType.startsWith('java.util.List') || returnType.startsWith('java.util.Set')}
		@if{genericType.equals('io.vertx.core.json.JsonObject')}
			util.list_obj_to_python(@includeNamed{templ}, dict)
		@else{genericType.equals('io.vertx.core.json.JsonArray')}
			util.list_obj_to_python(@includeNamed{templ}, list)
		@else{helper.isVertxGenType(helper.getGenericType(returnType))}
			util.list_obj_to_python(@includeNamed{templ}, @{helper.getGenericType(returnType)})
		@else{}
			@includeNamed{templ}
		@end{}
	@else{returnType.equals('io.vertx.core.json.JsonObject') || returnType.equals('io.vertx.core.json.JsonArray')}
		util.java_to_python(@includeNamed{templ})
	@else{helper.isBasicType(returnType) || returnType.equals('java.lang.Void')}
		@includeNamed{templ}
	@else{method.returnType.kind == CLASS_API}
		@{helper.getSimpleName(helper.getNonGenericType(returnType))}(@includeNamed{templ})
	@else{}
	@comment{'This will probably happen if the return type is generic'}
		util.java_to_python(@includeNamed{templ})
	@end{}
@end{}

@comment{"Generate a Python condition"}
@comment{"==========================="}

@declare{'getCondition'}
	@code{methodParamNames = getParamNames(method)}
	@if{paramNames.size() > methodParamNames.size()}
		@code{missingParamNames = []}
		@foreach{paramName: paramNames}
			@if{!methodParamNames.contains(paramName)}
				@code{missingParamNames.add(paramName)}
			@end{}
		@end{}
		@foreach{paramName: missingParamNames}@{helper.convertCamelCaseToUnderscores(paramName)} is None@end{" and "}
		 and 
	@end{}
	@foreach{param: method.params}
		@if{optionalParams.contains(param.name)}@{helper.convertCamelCaseToUnderscores(param.name)} is not None and @end{}
		@if{param.type.kind == CLASS_PRIMITIVE || param.type.kind == CLASS_BOXED_PRIMITIVE}
			@if{param.type.name == 'long' || param.type.name == 'java.lang.Long' ||
				param.type.name == 'int'  || param.type.name == 'java.lang.Integer' ||
				param.type.name == 'short' || param.type.name == 'java.lang.Short'}
				isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, int)
			@else{param.type.name == 'float' || param.type.name == 'java.lang.Float' ||
				param.type.name == 'double' || param.type.name == 'java.lang.Double'}
				isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, float)
			@else{param.type.name == 'byte' || param.type.name == 'java.lang.Byte'}
				isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, byte)
			@else{param.type.name == 'boolean' || param.type.name == 'java.lang.Boolean'}
				isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, bool)
			@else{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
				isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, basestring)
			@end{}
		@else{param.type.kind == CLASS_STRING}
			isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, basestring)
		@else{param.type.kind == CLASS_JSON_OBJECT}
	    	isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, dict)
		@else{param.type.kind == CLASS_JSON_ARRAY}
			isinstance(@{helper.convertCamelCaseToUnderscores(param.name)}, (list, tuple))
		@else{param.type.kind == CLASS_HANDLER}
			callable(@{helper.convertCamelCaseToUnderscores(param.name)})
		@else{}
			True
		@end{}
	@end{" and "}
@end{}

@comment{"Generate a Python Method"}
@comment{"========================"}

@declare{'genMethod'}
	@code{methodList = methodsByName.get(methodName); overloaded = methodList.size() > 1; method = methodList.get(0);}

	@code{requiredParams = []; optionalParams = []; paramNames = []; cnt = 0;}
	@foreach{method: methodList}
		@if{cnt == 0}
			@foreach{param: method.params}
				@code{requiredParams.add(param.name);}
			@end{}
			@code{cnt++}
		@else{}
			@code{newRequiredParams = []}
			@foreach{param: method.params}
				@if{!paramNames.contains(param.name)}@code{paramNames.add(param.name)}@end{}
				@if{requiredParams.contains(param.name)}
					@code{newRequiredParams.add(param.name)}
				@else{!optionalParams.contains(param.name)}
					@code{optionalParams.add(param.name)}
				@end{}
			@end{}
			@code{requiredParams = newRequiredParams}
		@end{}
	@end{}

	@code{childMethods = []}
	@foreach{method: methodList}
		@code{base = true; methodParamNames = getParamNames(method)}
		@foreach{methodParamName : methodParamNames}
			@if{!requiredParams.contains(methodParamName)}
				@code{base = false}
			@end{}
		@end{}
		@if{!base}@code{childMethods.add(method)}@end{}
	@end{}

	@code{baseMethod = null}
	@foreach{method: methodList}
		@code{base = true; methodParamNames = getParamNames(method)}
		@foreach{methodParamName : methodParamNames}
			@if{!requiredParams.contains(methodParamName)}
				@code{base = false}
			@end{}
		@end{}
		@if{base}@code{baseMethod = method}@end{}
	@end{}

	@if{baseMethod != null && static == method.staticMethod}
		@if{static}@{ind}@@classmethod\n@end{}
		@{ind}def @{helper.convertCamelCaseToUnderscores(methodName)}(self@if{!requiredParams.isEmpty()}, @foreach{param: requiredParams}@{helper.convertCamelCaseToUnderscores(param)}@end{", "}@end{}@if{!optionalParams.isEmpty()}, @foreach{param: optionalParams}@{helper.convertCamelCaseToUnderscores(param)}=None@end{", "}@end{}):\n
		@if{method.comment != null && helper.removeTags(method.comment).length() > 0}
			@{helper.indentString("\"\"\"\n" + helper.removeTags(method.comment) + "\"\"\"\n", ind + "    ")}
		@else{}
			@{ind}    """"""\n
		@end{}

		@if{childMethods.isEmpty()}
			@if{requiresTypeCheck([baseMethod])}
				@{ind}    if @includeNamed{'getCondition';method=baseMethod;}:\n
				@if{baseMethod.fluent}
					@{ind}        @includeNamed{'genMethodCall'; method=baseMethod}\n
				@else{}
					@{ind}        return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=baseMethod.returnType.name; method=baseMethod}\n
				@end{}
				@{ind}    else:\n
				@{ind}        raise TypeError("Invalid arguments for @{helper.convertCamelCaseToUnderscores(methodName)}")\n
			@else{}
				@if{baseMethod.fluent}
					@{ind}    @includeNamed{'genMethodCall'; method=baseMethod}\n
				@else{}
					@{ind}    return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=baseMethod.returnType.name; method=baseMethod}\n
				@end{}
			@end{}
		@else{}
			@code{mcnt = 0;}
			@foreach{method: childMethods}
				@{ind}    @if{mcnt == 0}if @code{mcnt++}@else{}elif @end{}@includeNamed{'getCondition'}:\n
				@if{method.fluent}
					@{ind}        @includeNamed{'genMethodCall'}\n
				@else{}
					@{ind}        return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType.name}\n
				@end{}
			@end{}
			@if{requiresTypeCheck([baseMethod])}
				@{ind}    elif @includeNamed{'getCondition';method=baseMethod;}:\n
				@if{baseMethod.fluent}
					@{ind}        @includeNamed{'genMethodCall'; method=baseMethod}\n
				@else{}
					@{ind}        return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=baseMethod.returnType.name; method=baseMethod}\n
				@end{}
				@{ind}    else:\n
				@{ind}        raise TypeError("Invalid arguments for @{helper.convertCamelCaseToUnderscores(methodName)}")\n
			@else{}
				@{ind}    else:\n
				@if{baseMethod.fluent}
					@{ind}        @includeNamed{'genMethodCall'; method=baseMethod}\n
				@else{}
					@{ind}        return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=baseMethod.returnType.name; method=baseMethod}\n
				@end{}
			@end{}
			@if{baseMethod.fluent}
				        return @if{static}@{ifaceSimpleName}@else{}self@end{}\n
			@end{}
		@end{}
		\n
	@end{}
@end{}

@comment{"Generate a Vert.x handler"}
@comment{"========================="}

@code{handlers = []}

@declare{'genHandlers'}
	@code{methodList = methodsByName.get(methodName); overloaded = methodList.size() > 1; method = methodList.get(0);}
	@foreach{method: methodList}
		@foreach{param: method.params}
			@if{param.type.name.startsWith('io.vertx.core.Handler<') && !handlers.contains(param.type.name)}
				@code{genericType = helper.getGenericType(param.type.name)}
				@if{genericType.startsWith('io.vertx.core.AsyncResult<')}
					@code{className = 'Async' + helper.getNonGenericType(helper.getSimpleName(helper.getGenericType(genericType))) + 'Handler'}
				@else{}
					@code{className = helper.getNonGenericType(helper.getSimpleName(genericType)) + 'Handler'}
				@end{}
				class @{className}(object):\n
				    class Java:\n
				        implements = 'io.vertx.core.Handler'\n
				    def __init__(self, handler):\n
				        self.handler = handler\n
				    def handle(self, result):\n
				@if{genericType.startsWith('io.vertx.core.AsyncResult<')}
					        if result.succeeded():\n
					@if{helper.getGenericType(genericType).startsWith('java.lang.Void')}
						            self.handler(None, None)\n
					@else{}
						            self.handler(@includeNamed{'convReturn'; templ='arVal'; returnType=helper.getGenericType(genericType)}, None)\n
					@end{}
					        else:\n
					            self.handler(None, result.cause())\n
				@else{}
					        self.handler(@includeNamed{'convReturn'; templ='resultVal'; returnType=genericType})\n
				@end{}
				\n
				@code{handlers.add(param.type.name)}
			@end{}
		@end{}
	@end{}
@end{}

@comment{"This is where the generation starts"}
@comment{"==================================="}

# Copyright 2011 the original author or authors.\n
#\n
# Licensed under the Apache License, Version 2.0 (the "License");\n
# you may not use this file except in compliance with the License.\n
# You may obtain a copy of the License at\n
#\n
#      http://www.apache.org/licenses/LICENSE-2.0\n
#\n
# Unless required by applicable law or agreed to in writing, software\n
# distributed under the License is distributed on an "AS IS" BASIS,\n
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n
# See the License for the specific language governing permissions and\n
# limitations under the License.\n

@comment{"Import utility functions into all modules"}
from vertx_python import util\n
\n

@comment{"Generate the imports"}

@foreach{referencedType : referencedTypes}
	@code{refedType = helper.getNonGenericType(referencedType.name)}
	@code{refedPackage = refedType.substring(refedType.lastIndexOf('.', refedType.lastIndexOf('.') - 1) + 1, refedType.lastIndexOf('.'))}
	from @{referencedType.moduleName}_python.@{refedPackage}.@{helper.convertCamelCaseToUnderscores(referencedType.simpleName)} import @{referencedType.simpleName}\n
@end{}
\n

@comment{"The top level vars for the module"}

@foreach{optionType: referencedOptionsTypes}
	@{helper.getSimpleName(optionType)} = jvm.@{optionType}\n
@end{}
\n
@code{ifaceName = helper.decapitaliseFirstLetter(ifaceSimpleName)}

@comment{"The class"}
class @{ifaceSimpleName}(@if{!superTypes.isEmpty()}object, @else{}object@end{}@foreach{superType: superTypes}@{helper.getSimpleName(helper.getNonGenericType(superType))}@end{", "}):\n

@comment{"The main comment"}
@if{ifaceComment != null}
	@{helper.indentString("\"\"\"\n" + helper.removeTags(ifaceComment) + "\n\"\"\"\n", "    ")}
@end{}

@comment{"The constructor"}
    def __init__(self, jval):\n
        self.j@{ifaceName} = jval\n
        super(@{ifaceSimpleName}, self).__init__(self@if{superTypes.size() > 0}, jval@end{})\n
\n

@comment{"Now iterate through each unique method"}

@foreach{methodName:methodsByName.keySet()}
	@comment{"Call out to actually generate the method, considering only non-static ones"}
	@includeNamed{'genMethod';static=false;ind="    "}
@end{}

@comment{"Each object has a _jdel property which gives access to the underlying Java object"}
    @@property\n
    def _jdel(self):\n
        return self.j@{ifaceName}\n\n

@comment{"Iterate through the methods again, this time only considering the static ones"}

@foreach{methodName:methodsByName.keySet()}
	@comment{"Call out to generate the static method"}
	@includeNamed{'genMethod';static=true;ind="    "}
@end{}

@comment{"Iterate through methods again and create result handler classes"}

@foreach{methodName:methodsByName.keySet()}
	@includeNamed{'genHandlers'}
@end{}
